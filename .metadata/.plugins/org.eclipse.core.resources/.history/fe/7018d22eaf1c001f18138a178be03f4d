package socket;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Vector;

import javax.swing.JTextArea;

import gui.ServerFrame;
import lombok.Data;

@Data
public class Server {
	private ServerFrame serverFrame;
	private ServerSocket serverSocket;
	private Socket socket;
	private JTextArea mainBoard;
	private FileWriter fileWriter;
	private BufferedReader reader;
	private BufferedWriter writer;
	private static final int PORT = 10001;
	private static Vector<USER> clientWriters = new Vector<>();

	public Server() {
		serverFrame = new ServerFrame(this);
		mainBoard = serverFrame.getMainBoard();
		try {
			serverSocket = new ServerSocket(PORT);
			serverFrame.getConnectBtn().setEnabled(false);
		} catch (IOException e) {
			serverFrame.getConnectBtn().setEnabled(true);
		}
	}
	
	
	private class USER extends Thread{
		// 소켓 장치
		private Socket socket;

		// 입출력 장치
		private BufferedReader reader;
		private BufferedWriter writer;
	}
	private void connectIO() {
		try {
			// 입출력 장치
			reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));
			writer = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()));

		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	private void serverViewAppendWriter(String str) {
		try {
			fileWriter = new FileWriter("my_server_log.txt", true);
			mainBoard.append(str);
			fileWriter.write(str);
			fileWriter.flush();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	public static void main(String[] args) {
		new Server();
		System.out.println("서버오픈");
	}
}// end of Class
